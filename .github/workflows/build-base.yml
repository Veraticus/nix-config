name: Build Base Image

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    env:
      CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            trusted-users = root runner

      - name: Use nix-community cache
        uses: cachix/cachix-action@v15
        with:
          name: nix-community
          skipPush: true

      - name: Use neovim-nightly cache
        uses: cachix/cachix-action@v15
        with:
          name: neovim-nightly
          skipPush: true

      - name: Configure joshsymonds Cachix
        if: ${{ env.CACHIX_AUTH_TOKEN != '' }}
        uses: cachix/cachix-action@v15
        with:
          name: joshsymonds
          authToken: ${{ env.CACHIX_AUTH_TOKEN }}

      - name: Build OCI image
        run: nix build --accept-flake-config .#egoengine

      - name: Compute image metadata
        id: meta
        run: |
          owner=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          repo=$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]')
          echo "image=ghcr.io/${owner}/${repo}/egoengine" >> "$GITHUB_OUTPUT"
          echo "rev=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Load image into Docker
        id: load
        run: |
          output=$(docker load < result)
          echo "$output"
          image=$(echo "$output" | sed -n 's/^Loaded image: //p' | tail -n1)
          if [ -z "$image" ]; then
            echo "Unable to determine loaded image name" >&2
            exit 1
          fi
          echo "loaded_image=$image" >> "$GITHUB_OUTPUT"

      - name: Tag image
        run: |
          SOURCE_IMAGE="${{ steps.load.outputs.loaded_image }}"
          docker tag "$SOURCE_IMAGE" "${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.rev }}"
          docker tag "$SOURCE_IMAGE" "${{ steps.meta.outputs.image }}:latest"

      - name: Authenticate to GHCR
        if: github.event_name != 'pull_request'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Push image
        if: github.event_name != 'pull_request'
        run: |
          docker push "${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.rev }}"
          docker push "${{ steps.meta.outputs.image }}:latest"
